<?php

declare(strict_types=1);

namespace MDurys\GupekBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\AbstractQuery;

/**
 * MeetingUserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MeetingUserRepository extends EntityRepository
{
    /**
     * Select all MeetingUser records matching given meeting and user
     * combination.
     *
     * @param Meeting | int $meeting
     * @param User | int $user
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function queryByMeetingAndUser($meeting, $user)
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select('mu')
            ->from(MeetingUser::class, 'mu')
            ->where('mu.meeting = :meeting')
            ->andWhere('mu.user = :user')
            ->setParameter('meeting', $meeting)
            ->setParameter('user', $user);
    }

    /**
     * Get all MeetingUser records matching given meeting and user
     * combination.
     *
     * @param Meeting | int $meeting
     * @param User | int $user
     * @return MeetingUser[]
     */
    public function getByMeetingAndUser($meeting, $user)
    {
        return $this->queryByMeetingAndUser($meeting, $user)
            ->getQuery()
            ->getResult();
    }

    /**
     * Check if given user participates in given meeting.
     *
     * @param Meeting | int $meeting
     * @param User | int $user
     * @return bool
     */
    public function existsMeetingAndUser($meeting, $user)
    {
        return (bool)$this->queryByMeetingAndUser($meeting, $user)
            ->select('mu.id')
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult(AbstractQuery::HYDRATE_SCALAR);
    }

    /**
     * Select all MeetingUser records matching given bout and user
     * combination.
     *
     * @param Bout | int $bout
     * @param User | int $user
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function queryByBoutAndUser($bout, $user)
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select('mu')
            ->from(MeetingUser::class, 'mu')
            ->where('mu.bout = :bout')
            ->andWhere('mu.user = :user')
            ->setParameter('bout', $bout)
            ->setParameter('user', $user);
    }

    /**
     * Get all MeetingUser records matching given bout and user
     * combination.
     *
     * @param User | int $user
     * @param Bout | int $bout
     * @return MeetingUser | null
     */
    public function getByBoutAndUser($bout, $user)
    {
        return $this->queryByBoutAndUser($bout, $user)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function getByMeetingId(int $meetingId)
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select('mu', 'u')
            ->from(MeetingUser::class, 'mu')
            ->leftJoin('mu.user', 'u')
            ->where('mu.meeting = :meetingId')->setParameter('meetingId', $meetingId)
            ->orderBy('u.username')
            ->getQuery()
            ->getResult();
    }
}
