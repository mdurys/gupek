<?php

namespace MDurys\GupekBundle\Entity;

use Doctrine\ORM\EntityRepository;
use MDurys\GupekBundle\Entity\Meeting;
use MDurys\GupekBundle\Entity\User;

/**
 * MeetingUserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MeetingUserRepository extends EntityRepository
{
    /**
     * @param \MDurys\GupekBundle\Entity\Meeting|int $meeting
     * @param \MDurys\GupekBundle\Entity\User|int $user
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function queryByMeetingAndUser($meeting, $user)
    {
        $meetingId = $this->getMeetingId($meeting);
        $userId = $this->getUserId($user);

        return $this->getEntityManager()->createQueryBuilder()
            ->select('mu')
            ->from($this->getEntityName(), 'mu')
            ->where('mu.meeting = :meeting')
            ->andWhere('mu.user = :user')
            ->setParameter('meeting', $meetingId)
            ->setParameter('user', $userId);
    }

    public function getByMeetingAndUser($meeting, $user)
    {
        return $this->queryByMeetingAndUser($meeting, $user)
            ->getQuery()
            ->getResult();
    }

    public function existsMeetingAndUser($meeting, $user)
    {
        return (bool)$this->queryByMeetingAndUser($meeting, $user)
            ->select('mu.id')
            ->setMaxResults(1)
            ->getQuery()
            ->getSingleScalarResult();
    }

    private function getMeetingId($meeting)
    {
        return $meeting instanceof Meeting
            ? $meeting->getId()
            : $meeting;
    }

    private function getUserId($user)
    {
        return $user instanceof User
            ? $user->getId()
            : $user;
    }
}
